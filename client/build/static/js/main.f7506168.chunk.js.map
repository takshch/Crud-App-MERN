{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","listData","tempListData","isListLoading","errorMessage","message","messageClass","currentPrice","currentName","prevPrice","fetchList","bind","messageNull","fetch","response","json","data","this","setState","e","id","target","parentNode","getAttribute","postBody","JSON","stringify","parseInt","console","log","requestOptions","method","headers","body","parent","childNodes","name","value","price","isNaN","sec","setTimeout","setAttribute","val","innerText","updateItem","wrapperList","Array","isArray","length","map","Fragment","typeName","WrappedList","key","data-id","contentEditable","onClick","parFocus","onFocus","onBlur","parBlur","onChange","parPriceChange","onKeyPress","className","onTouch","iconTouchClick","icon","faTrash","color","Container","fluid","Row","style","Col","lg","ColOutWrapper","ColInnerWrapper","AddWrapper","type","placeholder","setCurrentName","setCurrentPrice","addItem","Alert","variant","APIStory","Command","React","Component","styled","div","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f7506168.chunk.js","sourcesContent":["import React from 'react';\n// import ReactDOM from 'react-dom';\nimport './App.css';\nimport { Container, Row, Col, Alert } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FlipMove  from 'react-flip-move';\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {listData: [],\n                  tempListData: [],\n                  isListLoading: true,\n                  errorMessage: \"\",\n                  message: \"\",\n                  messageClass: \"\",\n                  currentPrice: null,\n                  currentName: \"\",\n                  prevPrice: null\n                };\n    this.fetchList = this.fetchList.bind(this);\n    this.messageNull = this.messageNull.bind(this);\n  }\n  async fetchList(){\n    try{\n      const url = \"/api/items\";\n      const response = await fetch(url);\n      let data = await response.json();\n      this.setState({listData: data},()=>{\n        this.setState({isListLoading: false});\n      });\n    }catch(error){\n      this.setState({errorMessage: \"Unable to fetch data\",isListLoading: false});\n    }  \n  }\n  async componentDidMount(){\n    this.fetchList();\n  }\n  \n  async iconTouchClick(e){  \n    let id = e.target.parentNode.parentNode.parentNode.getAttribute(\"data-id\");\n    if(id === null)\n      id = e.target.parentNode.getAttribute(\"data-id\");\n    let postBody = JSON.stringify({ id: parseInt(id)});\n    console.log(id);\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: postBody\n    };\n    try{\n      const response = await fetch('/api/delete', requestOptions)\n      let data = await response.json();\n      console.log(\"data:\",data);\n      if(data['status'] === \"deleted\" && data['error'] === null){\n        this.setState({message: \"Successfully deleted the item\",messageClass: \"success\"});\n      }else if(data['error']){\n        this.setState({message: data['error'],messageClass: \"dark\"});\n      }\n    }catch(error){\n      console.log(error);\n      this.setState({message: \"Can't detete items\",messageClass: \"dark\"});\n    }\n    this.fetchList();\n    this.messageNull(10000);\n  }\n\n\n  async addItem(e){\n    let parent = e.target.parentNode.childNodes;\n    let name = parent[0].value;\n    let price  = parent[1].value;\n    console.log(`name: ${name}, price: ${price}`);\n    if(name !== \"\" && price !== \"\" && !isNaN(price)){\n      let postBody  = JSON.stringify({name,price: parseInt(price)});\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: postBody\n      };\n      try{\n        const response = await fetch('/api/add', requestOptions)\n        let data = await response.json();\n        console.log(\"data:\",data);\n        if(data['status'] === \"success\" && data['error'] === null){\n          this.setState({message: \"Successfully deleted the item\",messageClass: \"success\"});\n        }else if(data['error']){\n          this.setState({message: data['error'],messageClass: \"dark\"});\n        }\n      }catch(error){\n        console.log(error);\n        this.setState({message: \"Can't add item\",messageClass: \"dark\"});\n      }\n      this.fetchList();\n      this.messageNull(10000);\n    }else if(name === \"\" || price === \"\" || isNaN(price)){\n      this.setState({message: \"name and price can't be empty or price must be number\",messageClass: \"dark\"});\n    }else{\n      this.setState({message: \"price\",messageClass: \"dark\"});\n    }\n    this.messageNull(10000);\n  }\n\n\n  async updateItem(price,id){\n    let postBody  = JSON.stringify({price: parseInt(price),id: parseInt(id)});\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: postBody\n    };\n    try{\n      const response = await fetch('/api/update', requestOptions)\n      let data = await response.json();\n      console.log(\"data:\",data);\n      if(data['status'] === \"success\" && data['error'] === null){\n        this.setState({message: \"Successfully updated the item\",messageClass: \"success\"});\n      }else if(data['error']){\n        this.setState({message: data['error'],messageClass: \"dark\"});\n      }\n    }catch(error){\n      console.log(error);\n      this.setState({message: \"Can't update item\",messageClass: \"dark\"});\n    }\n    this.fetchList();\n    this.messageNull(10000);\n  }\n\n  messageNull(sec = 2000){\n    setTimeout(()=>{\n      this.setState({message: \"\",messageClass: \"\"});\n    },parseInt(sec));\n  }\n\n  setCurrentName(e){\n    this.setState({currentName: e.target.value});\n  }\n\n  setCurrentPrice(e){\n    console.log(\"e:\",isNaN(e.target.value));\n    if(isNaN(e.target.value)){\n      this.setState({message: \"Price must be number\",messageClass: \"dark\"});\n      e.target.setAttribute(\"value\",\"\");\n      this.messageNull();\n    }else{\n      this.setState({currentPrice: parseInt(e.target.value)});\n    }\n  }\n\n  parFocus(val){\n    if(val.target.innerText !== \"\" && !isNaN(val.target.innerText)){\n      this.setState({prevPrice: parseInt(val.target.innerText)});\n      console.log(\"focus:\",val.target.innerText);\n    }\n  }\n\n  parBlur(e){\n    let id = e.target.parentNode.getAttribute(\"data-id\");\n    let value = e.target.innerText;\n    console.log(value);\n    if(value === \"\" && this.state.prevPrice !== null){\n      console.log(\"okay\");\n      e.target.innerText = value;\n      this.setState({prevPrice: null});      \n    }else if(!isNaN(value) && value !== \"\" && id !== \"\" && !isNaN(id)){\n      this.updateItem(parseInt(value),parseInt(id));\n    }\n  }\n  \n  parPriceChange(e){\n    console.log(\"par\");\n    let price = e.target.innerText;\n    if(price !== \"\" && isNaN(price) && this.state.prevPrice !== \"\"){\n      this.setState({message: \"Price must be number\",messageClass: \"dark\"});\n      e.target.innerText = this.state.prevPrice;\n      this.messageNull();\n    }else{\n\n      this.setState({currentPrice: parseInt(price)});\n    }\n  }\n\n\n  render(){\n    console.log(this.state.listData);\n    let wrapperList;\n    if(Array.isArray(this.state.listData) && this.state.listData.length !== 0){\n      wrapperList = this.state.listData.map((val)=>{  \n        return (<React.Fragment>\n          <FlipMove typeName={null}>\n            <WrappedList key={val.id} data-id={val.id}>\n              <span>{val.name}</span>\n              <p contentEditable=\"true\"\n                onClick={this.parFocus.bind(this)}\n                onFocus={this.parFocus.bind(this)}\n                onBlur={this.parBlur.bind(this)}\n              onChange={this.parPriceChange.bind(this)}\n              onKeyPress={this.parPriceChange.bind(this)}>{val.price}</p>\n              <span className=\"btn\" onTouch={this.iconTouchClick.bind(this)}\n               onClick={this.iconTouchClick.bind(this)}>\n                <FontAwesomeIcon  icon={faTrash} color=\"#fcbf49\"/></span>\n            </WrappedList>\n          </FlipMove>\n        </React.Fragment>);\n      });\n    }else wrapperList = <h4 className=\"text-center\">There is no data</h4>;\n\n    return (<React.Fragment>\n      <Container fluid>\n          <Row style={{\"min-height\": \"100vh\"}}>\n            <Col lg=\"8\" className=\"p-0\">\n              <ColOutWrapper className=\"d-flex justify-content-center\">\n                 <ColInnerWrapper>\n                  <h4 className=\"text-center\">CRUD APPLICATION</h4>\n                  <AddWrapper>\n                    <input type=\"text\" placeholder=\"Enter product name\"\n                      onChange={this.setCurrentName.bind(this)}/>\n                    <input type=\"text\" placeholder=\"Enter price\"\n                      onChange={this.setCurrentPrice.bind(this)}/>\n                    <input type=\"submit\" value=\"Add\" onClick={this.addItem.bind(this)}/>\n                  </AddWrapper>\n                  <div>\n        {this.state.message !== \"\" ? <Alert variant={this.state.messageClass}>{this.state.message}</Alert> : \"\"}\n                    {this.state.errorMessage !== \"\" ? <h4 className=\"text-center\">{this.state.errorMessage}</h4>: \"\"}\n                    {this.state.isListLoading ? <h4 className=\"text-center\">Loading....</h4> : wrapperList}\n                  <p style={{\"font-size\":\"1.05rem\"}} className=\"mt-4\">Note: To update the price, click on price and change the value and  <br />then click on blue background.</p>\n                  </div>\n                 </ColInnerWrapper>\n              </ColOutWrapper>\n            </Col>\n            <Col lg=\"4\" className=\"p-0\">\n              <APIStory>\n                <h4>API ENDPOINTS:</h4>\n                <Command>\"/items\"  --  to get data of all items</Command>\n                <Command>\"/add\"    --  to add item with name and price</Command>\n                <Command>\"/update\" --  to edit price of exiting item with id</Command>\n                <Command>\"/delete\" -- to delete item with id</Command>\n              </APIStory>\n            </Col>\n          </Row>\n      </Container>\n    </React.Fragment>);\n  }\n}\n\nconst Command =  styled.div`\n  padding: 5px 10px;\n  border-radius: 6px;\n  margin: 20px auto;\n  font-size: 1.05rem;\n  border: 1px solid #e5e5e5;\n  background: #edf2f4;\n  background-color: #edf2f4;\n  color: rgba(0,0,0,0.8);\n  :nth-of-type(1){\n    margin-top: 5px;\n  }\n`;\n\nconst APIStory = styled.div`\n   padding: 0px 15px; \n   padding-top: 30px;\n   height:  100%;\n   background: #f1faee;\n   backgrond-color: #f1faee;\n`;\n\n\n\n\nconst WrappedList = styled.div`\n  // background: #0566d;\n  background: #264653;\n  margin: 10px auto;\n  padding: 8px 10px;\n  font-size: 1rem;\n  border-radius: 4px;\n  display: flex;\n  > *{\n    flex: 1;\n    flex-shrink: 0;\n  }\n  > span:nth-of-type(1){\n    font-size: 1.13rem;\n    margin: auto;\n    margin-left: 10px;\n  }\n  > span:nth-of-type(1){\n    border-right: 2px solid #fff;\n  }\n  >span:nth-of-type(2){\n   flex: 0; \n  }\n  >span:nth-of-type(2):hover{\n    cursor: pointer;\n  }\n  >span:nth-of-type(2):active > svg{\n    color: #e63946;\n  }\n  > p{ \n    flex: auto;\n    margin: auto 5px;\n    margin-left: 10px; \n    border:none;\n    outline: none;\n    background: inherit;\n    background-color: inherit;\n    color: inherit;\n  }\n`;\n\nconst AddWrapper = styled.div`\n  margin: 30px auto;\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  font-size: 1.05rem;\n  color: #fff;\n  box-shadow: 1px 1px 44px -12px rgba(255,255,255,0.6);\n  background: #ef476f;\n  \n  > input {\n    border: none;\n    background: inherit;\n    outline: none;\n    color: #fff;\n    padding-left: 10px;\n    margin: auto 5px;\n  }\n  > input::placeholder{\n    color: #fff;\n  }\n  > input:nth-child(1){\n    border-right: 2px solid #fdfffc;\n  }\n  > input[type=\"submit\"]{\n    min-width: 80px;\n    border: none; \n    outline: none;\n    background: #fca311;\n    padding: 3px 0px;\n    background-color: #fca311;\n    border-radius: 4px;\n    box-shadow: 1px 1px 0px 1px rgba(0,0,0,0.05);\n    color:#fff;\n  }\n  >  input[type=\"submit\"]:active{\n      box-shadow: 2px 2px 0px 1px rgba(0,0,0,0.05),-2px -2px 0px 1px rgba(0,0,0,0.05);\n      background: #ff9f1c;\n  }\n`;\n\nconst ColOutWrapper = styled.div`\n  background: #2ec4b6;\n  background-color: #2ec4b6;\n  color: #fff;\n  font-size: 1.3  rem;\n  font-weight: 500;\n  height: 100%;\n  // padding-top: 20px;\n`;\nconst ColInnerWrapper = styled.div`\n  margin: 10px;\n  margin-top: 30px;\n`;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}